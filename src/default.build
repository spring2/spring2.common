<?xml version="1.0" ?>
<project name="Dss" default="build" xmlnds="http://tempuri.org/nant-vs.xsd">

	<property name="debug" value="true" />
	<property name="build.root" value="..\" />
	<property name="build.dir" value="..\build" />
	<property name="release.dir" value="..\release" />
	<property name="src.dir" value="..\src" />
	<property name="build.major" value="x" />
	<property name="build.minor" value="x" />
	<property name="build.build" value="x" />
	<property name="build.revision" value="x" />
	<property name="svn.executable" value="svn" />

	<target name="clean">
		<exec program="make" commandline="clean" />
	</target>

	<target name="ccnet-build">
		<if test="${not property::exists('CCNetLabel')}">
			<fail message="CCNetLabel property not set, so can't create labelled distribution files" />
		</if>
		<call target="CreateAssemblyVersionInfo" />
		<exec program="make" commandline="clean clean_release" />
		<exec program="make" commandline="precommit packageonly" />
	</target>

	<target name="ccnet-build_branch">
		<if test="${not property::exists('CCNetLabel')}">
			<fail message="CCNetLabel property not set, so can't create labelled distribution files" />
		</if>

		<call target="CreateAssemblyVersionInfo" />
		<call target="getSubversionRevision" />
		<exec program="make" commandline="clean clean_db clean_release" />
		<exec program="make" commandline="build deleteunittestdata build_db packageonly" >
			<environment>
				<option name="SQL_DATABASE" value="UppercaseLivingBranch" />
			</environment>
		</exec>
	</target>

	<target name="ccnet-publish">
		<if test="${not property::exists('CCNetLabel')}">
			<fail message="CCNetLabel property not set, so can't create labelled distribution files" />
		</if>
		<property name="publish.dir" value="${CCNetArtifactDirectory}\${CCNetLabel}" />

		<mkdir dir="${publish.dir}" />
		<copy todir="${publish.dir}">
			<fileset basedir="..\release">
				<include name="*"/>
			</fileset>
		</copy>
		<exec program="make" commandline="nuget" />
	</target>


	<target name="ccnet-regress">
		<if test="${not property::exists('CCNetLabel')}">
			<fail message="CCNetLabel property not set, so can't create labelled distribution files" />
		</if>
		<exec program="make" commandline="deleteunittestdata ncover" />
	</target>

	<!-- Populates variables (build.major, build.minor, build.build, and build.revision) with values
	        from AssemblyInfo.cs.  If property assemblyinfo.location is undefined, it will attempt to 
	        read AssemblyInfo.cs from the current directory. -->
	<target name="GetAssemblyVersion" description="Populates variables with the current version." >
		<script language="C#">
			<code>
				<![CDATA[
	        public static void ScriptMain(Project project) {
	            if (project.Properties["assemblyinfo.location"] == null)
	                project.Properties["assemblyinfo.location"] = "AssemblyVersionInfo.cs";
	            string assemblyInfoFilename = project.Properties["assemblyinfo.location"];
	
	            using (StreamReader reader = File.OpenText(assemblyInfoFilename))
	            {
	                Regex expression = new Regex(
	                   @"^\[assembly: System.Reflection.AssemblyVersion\(\""([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)");
	                string line = reader.ReadLine();
	                while (line != null) {
	                    Match match = expression.Match(line);
	                    if (match.Success) {
	                        project.Properties["build.major"] = match.Result("$1");
	                        project.Properties["build.minor"] = match.Result("$2");
	                        project.Properties["build.build"] = match.Result("$3");
	                        project.Properties["build.revision"] = match.Result("$4");
	                        break;
	                    }
	                    line = reader.ReadLine();
	                }
	            } 
	        }
	    ]]>
			</code>
		</script>
		<echo message="version='${build.major}.${build.minor}.${build.build}.${build.revision}'"/>
	</target>

	<target name="CreateAssemblyVersionInfo" description="Create an assembly info file with the current build number" >
		<if test="${not property::exists('CCNetLabel')}">
			<fail message="CCNetLabel property not set, so can't create labelled distribution files" />
		</if>
		<asminfo output="AssemblyVersionInfo.cs" language="CSharp">
			<imports>
				<import namespace="System.Reflection" />
			</imports>
			<attributes>
				<attribute type="System.Reflection.AssemblyVersionAttribute" value="${CCNetLabel}" />
				<attribute type="AssemblyCopyrightAttribute" value="Copyright 2013 Cortside Technologies" />
				<attribute type="AssemblyCompanyAttribute" value="Cortside Technologies" />
				<attribute type="AssemblyProductAttribute" value="Cortside.Common" />
			</attributes>
		</asminfo>
	</target>

	<target name="getSubversionRevision">
		<!-- Retrieve subversion revision number -->
		<echo message="Retrieving Subversion revision number"/>
		<property name="svn.revision" value="0"/>
		<exec
			program="svn"
			commandline='log "${src.dir}" --xml --limit 1'
			output="${src.dir}\_revision.xml"
			failonerror="false"/>
		<xmlpeek
			file="${src.dir}\_revision.xml"
			xpath="/log/logentry/@revision"
			property="svn.revision"
			failonerror="false"/>
		<echo message="Using Subversion revision number: ${svn.revision}"/>
	</target>

	<target name="svninfo" description="get the svn checkout information">
		<property name="svn.infotempfile" value="${build.dir}\svninfo.txt" />
		<exec program="${svn.executable}" output="${svn.infotempfile}">
			<arg value="info" />
		</exec>
		<loadfile file="${svn.infotempfile}" property="svn.info" />
		<delete file="${svn.infotempfile}" />

		<property name="match" value="" />

		<regex pattern="URL: (?'match'.*)" input="${svn.info}" />
		<property name="svn.info.url" value="${match}"/>

		<regex pattern="Repository Root: (?'match'.*)" input="${svn.info}" />
		<property name="svn.info.repositoryroot" value="${match}"/>

		<regex pattern="Revision: (?'match'\d+)" input="${svn.info}" />
		<property name="svn.info.revision" value="${match}"/>

		<regex pattern="Last Changed Author: (?'match'\w+)" input="${svn.info}" />
		<property name="svn.info.lastchangedauthor" value="${match}"/>

		<echo message="URL: ${svn.info.url}" />
		<echo message="Repository Root: ${svn.info.repositoryroot}" />
		<echo message="Revision: ${svn.info.revision}" />
		<echo message="Last Changed Author: ${svn.info.lastchangedauthor}" />
	</target>

	<target name="version" description="outputs version number to VersionInfo.cs">
		<echo file="${projectdir}/Properties/VersionInfo.cs">
			[assembly: System.Reflection.AssemblyVersion("$(CCNetLabel)")]
			[assembly: System.Reflection.AssemblyFileVersion("$(CCNetLabel)")]
		</echo>
	</target>

	<target name="branch_user_config" description="outputs src/user.config for using branch database">
		<echo file="${src.dir}/user.config">
			&lt;?xml version="1.0" encoding="utf-8" ?&gt;
			&lt;appSettings&gt;
			&lt;add key="ConnectionString" value="data source=.; initial catalog=UppercaseLivingBranch; user id=sa; password=1qaz2wsx; MultipleActiveResultSets=true;"/&gt;
			&lt;add key="DNNConnectionString" value="data source=.; initial catalog=ULExpressDNN; user id=sa; password=1qaz2wsx; MultipleActiveResultSets=true;"/&gt;
			&lt;/appSettings&gt;
		</echo>
	</target>

</project>
